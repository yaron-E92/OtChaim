# This workflow will build and test a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Continuous integration pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  gitVersion:
    name: Determine Version
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip this job
    outputs:
      branchName: ${{ steps.gitversion.outputs.branchName }}
      semVer: ${{ steps.gitversion.outputs.semVer }}
      sha: ${{ steps.gitversion.outputs.sha }}
      nugetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}
      assemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}
      informationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'
        preferLatestVersion: true

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        additionalArguments: '/updateprojectfiles'
        useConfigFile: true
        configFilePath: '.github/GitVersion.yaml'

  buildAndTestWithoutGUI:
    name: Build and Test (No GUI)
    # needs: [gitVersion]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
      packages: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Setup .NET
      id: setupDotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Ensure GitHub NuGet Source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/yaron-E92/index.json \
          -n github \
          -u Yaron-E92 \
          -p ${{ secrets.YARE92_NUGET_TOKEN_EXP_17JUN2026 }} \
          --store-password-in-clear-text
      continue-on-error: true

    - name: Restore Dependencies
      run: dotnet restore --no-cache
      continue-on-error: true

    - name: Build
      id: build
      run: |
        dotnet build -c NoGUI --no-restore
        if [ $? -ne 0 ]; then
          echo "::error::Build failed"
          exit 1
        fi

    - name: Test
      run: |
        dotnet test --logger "trx" --no-build -c NoGUI --verbosity normal \
          /p:AssemblyVersion=${{ needs.gitVersion.outputs.assemblySemFileVer }} \
          /p:FileVersion=${{ needs.gitVersion.outputs.assemblySemFileVer }} \
          /p:InformationalVersion=${{ needs.gitVersion.outputs.informationalVersion }}
        if [ $? -ne 0 ]; then
          echo "::error::Tests failed"
          exit 1
        fi

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{steps.build.outcome == 'success'}}
      with:
        files: |
          tests/**/TestResults/*.xml
          tests/**/TestResults/*.trx
          tests/**/TestResults/*.json
        check_name: "Test Results (No GUI)"

  checkWhetherGUIBuildNeeded:
    name: Check GUI Build Requirements
    needs: [gitVersion]
    runs-on: ubuntu-latest
    outputs:
      diff: ${{steps.checkDiff.outputs.diff}}
      override: ${{steps.determineOverride.outputs.override}}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Check diff
      id: checkDiff
      run: |
        DIFF=$(git diff origin/main HEAD -- src/OtChaim.GUI/**/*.cs src/OtChaim.GUI/*.cs src/OtChaim.GUI/**/*.xaml src/OtChaim.GUI/*.xaml | head -n 1)
        echo "diff=$DIFF" >> $GITHUB_OUTPUT
        echo "Diff found: $DIFF"

    - name: Check for override in PR description
      id: checkOverridePR
      if: contains(needs.gitVersion.outputs.branchName, 'pull')
      env:
        PR_DESCRIPTION: ${{ github.event.pull_request.body }}
      run: |
        guiLine=$(awk -F'+includeGUI: ' '{print $2}' <<< $PR_DESCRIPTION)
        echo "guiLine=$guiLine" >> $GITHUB_OUTPUT
        echo "PR GUI override: $guiLine"

    - name: Check for override in merge commit
      if: contains(needs.gitVersion.outputs.branchName, 'main')
      id: checkOverrideMerge
      env:
        MERGE_COMMIT: ${{ github.event.head_commit.message }}
      run: |
        guiLine=$(awk -F'+includeGUI: ' '{print $2}' <<< $MERGE_COMMIT)
        echo "guiLine=$guiLine" >> $GITHUB_OUTPUT
        echo "Merge GUI override: $guiLine"

    - name: Determine override
      id: determineOverride
      if: |
        steps.checkOverridePR.outputs.guiLine != '' ||
        steps.checkOverrideMerge.outputs.guiLine != ''
      env:
        PR_GUILINE: ${{steps.checkOverridePR.outputs.guiLine}}
        MERGE_GUILINE: ${{steps.checkOverrideMerge.outputs.guiLine}}
      run: |
        if [[ $PR_GUILINE == *"false"* || $MERGE_GUILINE == *"false"* ]]; then
          echo "override=false" >> $GITHUB_OUTPUT
        elif [[ $PR_GUILINE == *"true"* || $MERGE_GUILINE == *"true"* ]]; then
          echo "override=true" >> $GITHUB_OUTPUT
        else
          echo "override=" >> $GITHUB_OUTPUT
        fi
        echo "Final override value: ${{ steps.determineOverride.outputs.override }}"

  buildAndTestGUI:
    name: Build and Test GUI
    needs: [checkWhetherGUIBuildNeeded]
    if: |
      (needs.checkWhetherGUIBuildNeeded.outputs.diff != '' &&
      needs.checkWhetherGUIBuildNeeded.outputs.override != 'false') ||
      needs.checkWhetherGUIBuildNeeded.outputs.override == 'true'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
      packages: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Setup .NET
      id: setupDotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Ensure GitHub NuGet Source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/yaron-E92/index.json \
          -n github \
          -u Yaron-E92 \
          -p ${{ secrets.YARE92_NUGET_TOKEN_EXP_17JUN2026 }} \
          --store-password-in-clear-text
      continue-on-error: true

    - name: Install workload
      run: |
        dotnet workload install maui-android wasi-experimental
        if [ $? -ne 0 ]; then
          echo "::error::Failed to install workloads"
          exit 1
        fi

    - name: Setup Android SDK
      run: |
        echo "Checking GUI changes: ${{needs.checkWhetherGUIBuildNeeded.outputs.diff}}"
        /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "tools"
        if [ $? -ne 0 ]; then
          echo "::error::Failed to setup Android SDK"
          exit 1
        fi

    - name: Restore dependencies
      run: |
        dotnet restore src/OtChaim.GUI/OtChaim.GUI.csproj
        if [ $? -ne 0 ]; then
          echo "::error::Failed to restore dependencies"
          exit 1
        fi

    - name: Build
      id: build
      run: |
        dotnet build --no-restore src/OtChaim.GUI/OtChaim.GUI.csproj
        if [ $? -ne 0 ]; then
          echo "::error::Build failed"
          exit 1
        fi

    - name: Test
      run: |
        dotnet test src/OtChaim.GUI/OtChaim.GUI.csproj --logger "trx" --no-build --verbosity normal \
          /p:AssemblyVersion=${{ needs.gitVersion.outputs.assemblySemFileVer }} \
          /p:FileVersion=${{ needs.gitVersion.outputs.assemblySemFileVer }} \
          /p:InformationalVersion=${{ needs.gitVersion.outputs.informationalVersion }}
        if [ $? -ne 0 ]; then
          echo "::error::Tests failed"
          exit 1
        fi

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{steps.build.outcome == 'success'}}
      with:
        files: |
          tests/**/TestResults/*.xml
          tests/**/TestResults/*.trx
          tests/**/TestResults/*.json
        check_name: "Test Results (GUI)"

  tagAndRelease:
    name: Tag and Release
    needs: [gitVersion, buildAndTestWithoutGUI, buildAndTestGUI]
    if:  |
      (needs.buildAndTestGUI.result == 'skipped' || needs.buildAndTestGUI.result == 'success') &&
      contains(needs.gitVersion.outputs.branchName, 'main')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Tag on main
      run: |
        git config --global user.name "Github actions: gitversion"
        git config --global user.email "gitversion@github-actions.com"
        git tag -a "${{ needs.gitVersion.outputs.semVer}}" -m "Version ${{ needs.gitVersion.outputs.semVer}}"
        if [ $? -ne 0 ]; then
          echo "::error::Failed to create tag"
          exit 1
        fi
        git push --tags
        if [ $? -ne 0 ]; then
          echo "::error::Failed to push tags"
          exit 1
        fi
